
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Sep 11 22:56:00 IST 2007
//----------------------------------------------------

import java_cup.runtime.*;
import Handler.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Sep 11 22:56:00 IST 2007
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\002\000\002\004\010\000\002\003\010" +
    "\000\002\026\010\000\002\024\003\000\002\024\002\000" +
    "\002\005\005\000\002\005\003\000\002\005\002\000\002" +
    "\006\004\000\002\006\003\000\002\007\003\000\002\010" +
    "\005\000\002\010\004\000\002\012\004\000\002\012\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\013\006\000\002\013\005\000\002\030\007\000\002\030" +
    "\007\000\002\030\007\000\002\030\010\000\002\030\010" +
    "\000\002\030\010\000\002\021\004\000\002\014\005\000" +
    "\002\023\011\000\002\023\007\000\002\023\007\000\002" +
    "\025\006\000\002\015\011\000\002\027\003\000\002\031" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\134\000\010\002\ufffe\006\ufffe\031\ufffe\001\002\000" +
    "\010\002\010\006\011\031\ufff9\001\002\000\010\002\uffff" +
    "\006\uffff\031\uffff\001\002\000\010\002\001\006\001\031" +
    "\001\001\002\000\004\031\013\001\002\000\004\002\000" +
    "\001\002\000\004\031\ufffa\001\002\000\004\007\014\001" +
    "\002\000\020\007\uffd9\010\uffd9\011\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\001\002\000\010\006\017\010\ufff6\013" +
    "\ufff6\001\002\000\006\010\022\013\021\001\002\000\006" +
    "\010\ufff7\013\ufff7\001\002\000\010\010\ufff4\013\ufff4\031" +
    "\020\001\002\000\006\010\ufff5\013\ufff5\001\002\000\004" +
    "\006\017\001\002\000\006\004\025\014\024\001\002\000" +
    "\010\002\ufffd\006\ufffd\031\ufffd\001\002\000\016\004\031" +
    "\015\043\017\030\020\040\021\033\031\013\001\002\000" +
    "\010\002\ufffc\006\ufffc\031\ufffc\001\002\000\024\002\ufff3" +
    "\004\ufff3\006\ufff3\015\ufff3\017\ufff3\020\ufff3\021\ufff3\022" +
    "\ufff3\031\ufff3\001\002\000\016\004\uffea\015\uffea\017\uffea" +
    "\020\uffea\021\uffea\031\uffea\001\002\000\004\007\047\001" +
    "\002\000\016\004\uffed\015\uffed\017\uffed\020\uffed\021\uffed" +
    "\031\uffed\001\002\000\016\004\uffee\015\uffee\017\uffee\020" +
    "\uffee\021\uffee\031\uffee\001\002\000\004\007\047\001\002" +
    "\000\016\004\uffeb\015\uffeb\017\uffeb\020\uffeb\021\uffeb\031" +
    "\uffeb\001\002\000\016\004\uffef\015\uffef\017\uffef\020\uffef" +
    "\021\uffef\031\uffef\001\002\000\010\007\101\011\102\031" +
    "\013\001\002\000\016\004\031\015\100\017\030\020\040" +
    "\021\033\031\013\001\002\000\004\014\024\001\002\000" +
    "\016\004\uffe9\015\uffe9\017\uffe9\020\uffe9\021\uffe9\031\uffe9" +
    "\001\002\000\016\004\uffec\015\uffec\017\uffec\020\uffec\021" +
    "\uffec\031\uffec\001\002\000\024\002\ufff1\004\ufff1\006\ufff1" +
    "\015\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\031\ufff1\001" +
    "\002\000\004\017\045\001\002\000\004\007\046\001\002" +
    "\000\004\007\047\001\002\000\004\031\013\001\002\000" +
    "\004\010\051\001\002\000\004\004\052\001\002\000\016" +
    "\004\uffda\015\uffda\017\uffda\020\uffda\021\uffda\031\uffda\001" +
    "\002\000\012\011\056\026\054\027\055\030\057\001\002" +
    "\000\006\011\072\031\013\001\002\000\006\011\065\031" +
    "\013\001\002\000\004\031\013\001\002\000\004\011\060" +
    "\001\002\000\004\031\013\001\002\000\004\010\062\001" +
    "\002\000\006\010\uffe1\014\uffe1\001\002\000\004\010\064" +
    "\001\002\000\006\010\uffe6\014\uffe6\001\002\000\004\031" +
    "\013\001\002\000\004\010\067\001\002\000\006\010\uffe4" +
    "\014\uffe4\001\002\000\004\010\071\001\002\000\006\010" +
    "\uffe3\014\uffe3\001\002\000\004\031\013\001\002\000\004" +
    "\010\074\001\002\000\006\010\uffe5\014\uffe5\001\002\000" +
    "\004\010\076\001\002\000\006\010\uffe2\014\uffe2\001\002" +
    "\000\016\004\ufff0\015\ufff0\017\ufff0\020\ufff0\021\ufff0\031" +
    "\ufff0\001\002\000\024\002\ufff2\004\ufff2\006\ufff2\015\ufff2" +
    "\017\ufff2\020\ufff2\021\ufff2\022\ufff2\031\ufff2\001\002\000" +
    "\012\006\017\010\ufff6\013\ufff6\031\013\001\002\000\004" +
    "\031\013\001\002\000\004\007\104\001\002\000\010\006" +
    "\017\010\ufff6\013\ufff6\001\002\000\006\010\106\013\021" +
    "\001\002\000\004\014\024\001\002\000\016\004\ufffb\015" +
    "\ufffb\017\ufffb\020\ufffb\021\ufffb\031\ufffb\001\002\000\004" +
    "\007\111\001\002\000\010\006\017\010\ufff6\013\ufff6\001" +
    "\002\000\006\010\113\013\021\001\002\000\004\004\114" +
    "\001\002\000\016\004\uffde\015\uffde\017\uffde\020\uffde\021" +
    "\uffde\031\uffde\001\002\000\006\010\125\013\021\001\002" +
    "\000\004\010\123\001\002\000\004\007\120\001\002\000" +
    "\010\006\017\010\ufff6\013\ufff6\001\002\000\006\010\122" +
    "\013\021\001\002\000\004\010\uffdb\001\002\000\004\004" +
    "\124\001\002\000\016\004\uffdc\015\uffdc\017\uffdc\020\uffdc" +
    "\021\uffdc\031\uffdc\001\002\000\004\004\126\001\002\000" +
    "\016\004\uffdd\015\uffdd\017\uffdd\020\uffdd\021\uffdd\031\uffdd" +
    "\001\002\000\004\014\024\001\002\000\020\004\uffe7\015" +
    "\uffe7\017\uffe7\020\uffe7\021\uffe7\022\131\031\uffe7\001\002" +
    "\000\004\014\024\001\002\000\016\004\uffe8\015\uffe8\017" +
    "\uffe8\020\uffe8\021\uffe8\031\uffe8\001\002\000\016\004\uffe0" +
    "\015\uffe0\017\uffe0\020\uffe0\021\uffe0\031\uffe0\001\002\000" +
    "\004\014\024\001\002\000\016\004\uffdf\015\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\031\uffdf\001\002\000\006\010\ufff8\013" +
    "\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\134\000\004\002\003\001\001\000\010\003\005\004" +
    "\004\024\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\014" +
    "\006\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\135\001\001" +
    "\000\006\007\022\010\025\001\001\000\002\001\001\000" +
    "\022\011\034\012\036\013\041\014\033\015\026\023\031" +
    "\026\040\027\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\102\001\001" +
    "\000\020\011\076\013\041\014\033\015\026\023\031\026" +
    "\040\027\035\001\001\000\006\007\043\010\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\047\001\001" +
    "\000\004\027\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\072" +
    "\001\001\000\004\027\065\001\001\000\004\027\062\001" +
    "\001\000\002\001\001\000\004\027\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\114\006\015\025\115\027\116\001\001" +
    "\000\004\027\107\001\001\000\002\001\001\000\006\005" +
    "\104\006\015\001\001\000\002\001\001\000\006\007\106" +
    "\010\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\111\006\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\120\006\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\127\010\025\001\001\000\004\021\131\001\001\000" +
    "\006\007\132\010\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\134\010\025\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 myscanner.init(); 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comparator_nt ::= COMPARATOR 
            {
              java.lang.String RESULT =null;
		int cmpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cmpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String cmp = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = myscanner.lastScanned ;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparator_nt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // variable_nt ::= VARIABLE 
            {
              java.lang.String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = myscanner.lastScanned ;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_nt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // dowhilestatement ::= DO globalblock WHILE LEFTPARAN condition RIGHTPARAN SEMI 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String cond = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("dowhile condition " + cond); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dowhilestatement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // function_call_no_semi ::= variable_nt LEFTPARAN arguement_list RIGHTPARAN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println("function called " + e); RESULT = e; 
				 Handler.HandleFlow.insertNode(e,"function"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call_no_semi",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // function_call ::= variable_nt LEFTPARAN function_call_no_semi RIGHTPARAN SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // function_call ::= variable_nt LEFTPARAN arguement_list RIGHTPARAN SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 System.out.println("function called " + e); RESULT = e; 
				 Handler.HandleFlow.insertNode(e,"function"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // function_call ::= variable_nt EQUALS variable_nt LEFTPARAN arguement_list RIGHTPARAN SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 System.out.println("function called " + e); RESULT = e; 
				 Handler.HandleFlow.insertNode(e,"function");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // whilestatement ::= WHILE condition globalblock 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String cond = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  System.out.println("while condition is :" + cond); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whilestatement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // elsestmt ::= ELSE globalblock 
            {
              Object RESULT =null;
		 
                HandleFlow.insertNode("else","function"); 
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsestmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condition ::= LEFTPARAN variable_nt EXCL EQUALS variable_nt RIGHTPARAN 
            {
              java.lang.String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String e1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String e2 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e1+ "!="+ e2 ; 
              if(FileStuff.debugMode) System.out.println("condition : " + e1+ "!=" + e2);HandleFlow.insideIf();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condition ::= LEFTPARAN variable_nt LT EQUALS variable_nt RIGHTPARAN 
            {
              java.lang.String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String e1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String e2 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e1+ "<="+ e2 ; 
              if(FileStuff.debugMode) System.out.println("condition : " + e1+ "<=" + e2);HandleFlow.insideIf();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condition ::= LEFTPARAN variable_nt GT EQUALS variable_nt RIGHTPARAN 
            {
              java.lang.String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String e1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String e2 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e1+ ">="+ e2 ; 
              if(FileStuff.debugMode) System.out.println("condition : " + e1+ ">=" + e2);HandleFlow.insideIf();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // condition ::= LEFTPARAN variable_nt GT variable_nt RIGHTPARAN 
            {
              java.lang.String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String e1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String e2 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e1+ ">"+ e2 ; 
              if(FileStuff.debugMode) System.out.println("condition : " + e1+ ">" + e2);HandleFlow.insideIf();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condition ::= LEFTPARAN variable_nt LT variable_nt RIGHTPARAN 
            {
              java.lang.String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String e1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String e2 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e1+ "<"+ e2 ; 
           if(FileStuff.debugMode)  System.out.println("condition : " + e1+ "<" + e2);HandleFlow.insideIf();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condition ::= LEFTPARAN variable_nt EQUALS variable_nt RIGHTPARAN 
            {
              java.lang.String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String e1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String e2 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e1+ "==" + e2 ; 
           if(FileStuff.debugMode) System.out.println("condition : " + e1+ "=="+ e2); HandleFlow.insideIf();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ifstatement ::= IF condition globalblock 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String cond = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("if condition is  :" + cond);
			HandleFlow.insertNode("ifstmt" + cond + " ","function");
				   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifstatement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ifstatement ::= IF condition globalblock elsestmt 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String cond = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("if condition is  :" + cond);
				  HandleFlow.insertNode("ifstmt " + cond + " ","function");
				   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifstatement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= inlinefunction 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= dowhilestatement 
            {
              Object RESULT =null;
		 System.out.println("dowhile statement reached"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= whilestatement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= ifstatement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= SEMI 
            {
              Object RESULT =null;
		if(FileStuff.debugMode) System.out.println("semi colon reached"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= function_call 
            {
              Object RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(FileStuff.debugMode) System.out.println("function" + fc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement_list ::= statement 
            {
              Object RESULT =null;
		if(FileStuff.debugMode) System.out.println("statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement_list ::= statement_list statement 
            {
              Object RESULT =null;
		if(FileStuff.debugMode) System.out.println("statement list"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // block ::= LEFTBRACE RIGHTBRACE 
            {
              Object RESULT =null;
		if(FileStuff.debugMode) System.out.println("empty block"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // block ::= LEFTBRACE statement_list RIGHTBRACE 
            {
              Object RESULT =null;
		if(FileStuff.debugMode) System.out.println("block with statement_list"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // globalblock ::= block 
            {
              Object RESULT =null;
		if(FileStuff.debugMode) System.out.println("globalblock reached"); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalblock",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arguement ::= RETURNTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // arguement ::= RETURNTYPE VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // arguement_list ::= 
            {
              Object RESULT =null;
		 if(FileStuff.debugMode) System.out.println("empty arguement list"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguement_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // arguement_list ::= arguement 
            {
              Object RESULT =null;
		 if(FileStuff.debugMode) System.out.println("Single Arguement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguement_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // arguement_list ::= arguement_list COMMA arguement 
            {
              Object RESULT =null;
		 if(FileStuff.debugMode) System.out.println("Arguement List"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguement_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // return_type ::= 
            {
              Object RESULT =null;
		 if(FileStuff.debugMode) System.out.println("empty return type"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // return_type ::= RETURNTYPE 
            {
              Object RESULT =null;
		 if(FileStuff.debugMode) System.out.println("return type"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inlinefunction ::= variable_nt variable_nt LEFTPARAN arguement_list RIGHTPARAN globalblock 
            {
              Object RESULT =null;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String vari = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 if(FileStuff.debugMode) System.out.println("parent_function_name " + vari); 
	 HandleFlow.insertNode(vari+"#","parent"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inlinefunction",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function_def ::= return_type variable_nt LEFTPARAN arguement_list RIGHTPARAN SEMI 
            {
              Object RESULT =null;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String vari = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 if(FileStuff.debugMode) System.out.println("function definition " + vari); 
   			HandleFlow.insertNode(vari+"#","parentdef");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_def",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // function ::= return_type variable_nt LEFTPARAN arguement_list RIGHTPARAN globalblock 
            {
              Object RESULT =null;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String vari = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 if(FileStuff.debugMode) System.out.println("parent_function_name " + vari); 
	 HandleFlow.insertNode(vari+"#","parent"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cprogram ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cprogram",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cprogram ::= cprogram function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cprogram",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= cprogram EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // cprogram ::= cprogram function_def 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cprogram",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

